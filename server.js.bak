var express = require('express');
const session = require('express-session');
const passport = require('passport');  // authentication
const LocalStrategy = require("passport-local").Strategy;
var cors = require('cors');
const cron = require("node-cron");
const path = require('path');
const mongoose = require('mongoose');
const dotenv = require('dotenv');
const websocketStream = require('websocket-stream')

const { userColl } = require('./models/user.js');

/** Frontend Routes */
const { routes } = require('./Routes/users.js');
const { marketRoutes } = require('./Routes/market.js');
const { tokenRoutes } = require('./Routes/token.js');
const { assetsRoutes } = require('./Routes/assets.js')
const { depositRoutes } = require('./Routes/deposit.js')
const { withdrawRoutes } = require('./Routes/withdraw.js')
const { kycRoute } = require('./Routes/kycRoutes');
const { postRoute } = require('./Routes/postRoutes.js');
const { paymentsRoutes } = require('./Routes/payment');
const { orderRoute } = require('./Routes/orderRoute.js');
const { chatRoute } = require('./Routes/chatRoutes.js');

/**Dasdboard Routes */
const {userRoutes} = require('./Routes/Dashboard/userRoutes');
// const { dbTokenRoutes } = require('./Routes/Dashboard/tokenRoutes.js');
const {depositsRoutes} = require('./Routes/Dashboard/depositsRoutes');
const {withdrawsRoutes} = require('./Routes/Dashboard/withdrawsRoutes');
const {kycMediaRoutes} = require('./Routes/Dashboard/kycMediaRoutes');
const {tokensRoutes} = require('./Routes/Dashboard/tokenRoutes')
const {ordersRoutes} = require('./Routes/Dashboard/ordersRoutes')
const { Socket } = require('dgram');
const { websocketOrderController } = require('./controllers/marketController');

var router = express.Router();

dotenv.config()

/** database url */
const DB_URI = process.env.DATABASE_URL
const PORT = process.env.PORT || 5000

const app = express()

app.get('/', (req, res) => {
  res.send('hello Exchange')
})

// Configure the path of email template
app.set('views', path.dirname('../') + '/api/views');
app.set('view engine', 'jade');

// To read images from API for frontend
app.use(express.static('assets'));

// Configure Sessions Middleware
app.use(session({
  secret: 'r8q,+&1LM3)CD*zAGpx1xm{NeQhc;#',
  resave: false,
  saveUninitialized: true,
  cookie: { maxAge: 60 * 60 * 1000 } // 1 hour
}));

app.use(express.json({limit: 50 * 1024}));
app.use(express.urlencoded({ extended: true }));
app.use(cors('*'));
app.use(express.static('assets'));

// Add header before the routes are defined
app.use(function (req, res, next) {

  // Website you wish to allow to connect
  res.setHeader('Access-Control-Allow-Origin', '*');

  // Request methods you wish to allow
  res.setHeader('Access-Control-Allow-Methods', 'GET, POST, OPTIONS, PUT, PATCH, DELETE');

  // Request headers you wish to allow
  res.setHeader('Access-Control-Allow-Headers', 'X-Requested-With,content-type');

  // Set to true if you need the website to include cookies in the requests sent
  // to the API (e.g. in case you use sessions)
  res.setHeader('Access-Control-Allow-Credentials', true);

  // Pass to next layer of middleware
  next();
});

// passport config
// passport.use(userColl.createStrategy());
const local = new LocalStrategy(async (username, password, done) => {
  try {
    userColl.findOne({ username })
      .then(user => {
        if (!user || !user.validPassword(password)) {
          return done(null, false, { message: "Invalid username/password" });
        } else {
          return done(null, user);
        }
      })
      .catch(e => done(e));
  } catch (error) {
    return done(error, false);
  }

});

const Smslocal = new LocalStrategy(async (username, password, done) => {
  try {
    userColl.findOne({ username: username })
      .then(user => {
        if (!user || !user.validPassword(password)) {
          return done(null, false, { message: "Invalid username/password" });
        } else {
          return done(null, user);
        }
      })
      .catch(e => done(e));
  } catch (error) {
    return done(error, false);
  }

});
passport.use('local', local);
passport.use('sms-local', Smslocal);
passport.serializeUser(userColl.serializeUser());
passport.deserializeUser(userColl.deserializeUser());

app.use(passport.initialize());
app.use(passport.session());

app.use('/api/user', routes)
app.use('/api/market', marketRoutes)
app.use('/api/token', tokenRoutes)
app.use('/api/assets', assetsRoutes)
app.use('/api/deposit', depositRoutes)
app.use('/api/withdraw', withdrawRoutes)
app.use('/api/kyc', kycRoute)
app.use('/api/post', postRoute)
app.use('/api/payment', paymentsRoutes)

app.use('/api/order', orderRoute)
app.use('/api/chat', chatRoute)

// admin Dashboard routes setup
app.use('/api/admin/user', userRoutes)
app.use('/api/admin/market',tokensRoutes)
app.use('/api/admin/deposit', depositsRoutes)
app.use('/api/admin/withdraw', withdrawsRoutes)
app.use('/api/admin/kyc', kycMediaRoutes)
app.use('/api/admin/token', tokensRoutes)
app.use('/api/admin/order', ordersRoutes)


const WebSocket = require('ws');
const { marketBuySell } = require('./controllers/marketController.js');
const { transferAssetsToUsers } = require('./cron/cron.js');
const {sendMessageByWs} = require('./controllers/chatController.js')
const {sendOrderNotificationWs} = require('./controllers/orderController.js')

const server = require('http').createServer(app);

// Creating a new websocket server
const wss = new WebSocket.Server({ server: server })

// Creating connection using websocket
wss.on("connection", async (ws) => {
  // console.log("new client connected", ws.personName);
  // wss.clients.forEach(function e(client) {
  //   console.log(client,'client');
  // })
  websocketOrderController(ws)

  cron.schedule("*/5 * * * * *", function() {
    websocketOrderController(ws)
  });
  
  ws.on('message', async (data) => {
    let body = JSON.parse(data);
    console.log(body,'========websocket body')
    if (body.ws_type === 'buysell') {
      marketBuySell(wss, ws, body);
    }
    if(body.ws_type === 'chat'){
      sendMessageByWs(wss, ws, body)
    }
    if(body.ws_type === 'order'){
      sendOrderNotificationWs(wss, ws, body.order)
    }
  })

});

cron.schedule("*/30 * * * * *", function() {
  transferAssetsToUsers()
});


router.use((request, response, next) => {
  next();
});




mongoose.connect(DB_URI, { useNewUrlParser: true, useUnifiedTopology: true })
  .then(() => {
    server.listen(PORT, () => {
      console.log('Your server is running on port : ', PORT)
    })
  }).catch((err) => {
    console.log('i am here ===', err)
  })

// //mongodb+srv://surindermdb:surinderSta@cluster0.hpf2a.mongodb.net/STA